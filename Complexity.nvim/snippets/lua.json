{"Numeric For Loop":{"body":["for ${1:i} = ${2:start}, ${3:finish}, ${4:step} do","\t${5:-- body}","end"],"description":"Create a Lua numeric for loop","prefix":"numfor"},"Local Variable":{"body":["local ${1:name} = ${2:value}"],"description":"Define a local variable in Lua","prefix":"local"},"Table":{"body":["local ${1:tableName} = {","\t${2:key} = ${3:value},","}"],"description":"Create a Lua table","prefix":"table"},"Metatable":{"body":["local mt = {","\t__index = function(${1:table}, ${2:key})","\t\t${3:-- body}","\tend","}"],"description":"Create a Lua metatable","prefix":"metatable"},"Table Insert":{"body":["table.insert(${1:table}, ${2:value})"],"description":"Insert a value into a Lua table","prefix":"tinsert"},"If Statement":{"body":["if ${1:condition} then","\t${2:-- body}","end"],"description":"Generate a Lua if statement","prefix":"if"},"Function":{"body":["function ${1:functionName}(${2:params})","\t${3:-- body}","end"],"description":"Define a Lua function","prefix":"func"},"Print Statement":{"body":["print(\"${1:message}\")"],"description":"Shortcut for Lua's print function","prefix":"print"},"If-Else Statement":{"body":["if ${1:condition} then","\t${2:-- true body}","else","\t${3:-- false body}","end"],"description":"Create a Lua if-else statement","prefix":"ifelse"},"Debug Print":{"body":["print('[DEBUG]: ${1:message}')"],"description":"Debug print in Lua","prefix":"dprint"},"While Loop":{"body":["while ${1:condition} do","\t${2:-- body}","end"],"description":"Generate a Lua while loop","prefix":"while"},"Anonymous Function":{"body":["local ${1:funcName} = function(${2:params})","\t${3:-- body}","end"],"description":"Create a Lua anonymous function","prefix":"anonfunc"},"Repeat Until Loop":{"body":["repeat","\t${1:-- body}","until ${2:condition}"],"description":"Create a Lua repeat-until loop","prefix":"repeat"},"Plugin":{"body":["{","\t'${1:Name}',","\tdependencies = {'${2:dependencies}'},","\tbuild = nil,","\tlazy = true,","\tcmd = {},","\tevent = {},","\tconfig = true,","\topts = {},","}"],"description":"Plugin for neovim in the Lazy way","prefix":"lazy plugin"},"String Format":{"body":["string.format(\"${1:format}\", ${2:args})"],"description":"Format a string in Lua","prefix":"strfmt"},"For Loop":{"body":["for ${1:i} = ${2:1}, ${3:10} do","\t${4:-- body}","end"],"description":"Generate a Lua for loop","prefix":"for"},"Require Module":{"body":["local ${1:module} = require('${2:moduleName}')"],"description":"Require a Lua module","prefix":"require"},"Return Statement":{"body":["return ${1:value}"],"description":"Return a value in Lua","prefix":"return"},"Lazy keymaps - the lazy way":{"body":["{","    \"<${1:keys}>\",","    \"<cmd>${2:Command}<cr>\",","    -- function()","        -- body","    -- end","    mode = {\"${3:mode}\"},","    desc = \"${4:Description}\",","}"],"prefix":"Lazy keymaps - the lazy way"}}