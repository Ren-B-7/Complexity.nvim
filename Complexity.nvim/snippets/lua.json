{"Debug Print":{"body":["print('[DEBUG]:\n${1:message}')"],"description":"Debug print in Lua","prefix":"dprint"},"Require\nModule":{"body":["local ${1:module} =\nrequire('${2:moduleName}')"],"description":"Require a Lua\nmodule","prefix":"require"},"Table":{"body":["local ${1:tableName} = {","\t${2:key} =\n${3:value},","}"],"description":"Create a Lua\ntable","prefix":"table"},"While\nLoop":{"body":["while ${1:condition} do","\t${2:--\nbody}","end"],"description":"Generate a Lua while\nloop","prefix":"while"},"Return Statement":{"body":["return\n${1:value}"],"description":"Return a value in Lua","prefix":"return"},"Metatable":{"body":["local mt = {","\t__index =\nfunction(${1:table}, ${2:key})","\t\t${3:--\nbody}","\tend","}"],"description":"Create a Lua\nmetatable","prefix":"metatable"},"Function":{"body":["function\n${1:functionName}(${2:params})","\t${3:-- body}","end"],"description":"Define a\nLua function","prefix":"func"},"Repeat Until\nLoop":{"body":["repeat","\t${1:-- body}","until\n${2:condition}"],"description":"Create a Lua repeat-until\nloop","prefix":"repeat"},"Table\nInsert":{"body":["table.insert(${1:table}, ${2:value})"],"description":"Insert a\nvalue into a Lua table","prefix":"tinsert"},"Plugin":{"body":["{","\t'${1:Name}',","\tdependencies = {'${2:dependencies}'},","\tbuild = nil,","\tlazy = true,","\tcmd = {},","\tevent = {},","\tconfig = true,","\topts = {},","    keys = {},","}"],"description":"Plugin for neovim in the Lazy way","prefix":["lazy","plugin"]},"If Statement":{"body":["if\n${1:condition} then","\t${2:-- body}","end"],"description":"Generate a Lua if\nstatement","prefix":"if"},"Print\nStatement":{"body":["print(\"${1:message}\")"],"description":"Shortcut for Lua's\nprint function","prefix":"print"},"Anonymous Function":{"body":["local ${1:funcName} =\nfunction(${2:params})","\t${3:-- body}","end"],"description":"Create a Lua\nanonymous function","prefix":"anonfunc"},"String Format":{"body":["string.format(\"${1:format}\",\n${2:args})"],"description":"Format a string in Lua","prefix":"strfmt"},"If-Else Statement":{"body":["if\n${1:condition} then","\t${2:-- true body}","else","\t${3:-- false\nbody}","end"],"description":"Create a Lua if-else\nstatement","prefix":"ifelse"},"Lazy\nkeymaps - the lazy way":{"body":["{","    \"<${1:keys}>\",","    \"<cmd>${2:Command}<cr>\",","    -- function()","        -- body","    -- end,","    mode = {\"${3:mode}\"},","    desc = \"${4:Description}\",","}"],"prefix":["Lazy","keymaps - the lazy way"]},"Numeric For Loop":{"body":["for ${1:i} = ${2:start}, ${3:finish}, ${4:step}\ndo","\t${5:-- body}","end"],"description":"Create a Lua numeric for\nloop","prefix":"numfor"},"For\nLoop":{"body":["for ${1:i} = ${2:1}, ${3:10} do","\t${4:--\nbody}","end"],"description":"Generate a Lua for loop","prefix":"for"},"Local Variable":{"body":["local ${1:name} =\n${2:value}"],"description":"Define a local variable in\nLua","prefix":"local"}}